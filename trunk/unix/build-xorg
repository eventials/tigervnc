#!/bin/bash
# -*- mode: shell-script; coding: UTF-8 -*-
# 
# Build Xvnc with Xorg 7.4
#

set -e

PREFIX=
MAKE="make"
STATIC=0
XORG_VERSION=
SRCDIR=`dirname $0`/..

modules="dri2proto \
    libpthread-stubs \
    glproto \
    xf86vidmodeproto \
    xextproto \
    xproto \
    kbproto \
    inputproto \
    xcmiscproto \
    bigreqsproto \
    fixesproto \
    damageproto \
    xf86driproto \
    randrproto \
    renderproto \
    scrnsaverproto \
    resourceproto \
    fontsproto \
    videoproto \
    compositeproto \
    xineramaproto \
    fontcacheproto \
    libdrm \
    libXau \
    xtrans \
    libXdmcp \
    libX11 \
    libXext \
    libXxf86vm \
    libICE \
    libSM \
    libXt \
    libXmu \
    libXfixes \
    libXdamage \
    libXi \
    evieext \
    libxkbfile \
    libfontenc \
    libXfont \
    libpciaccess \
    pixman"


init()
{
    update_modules

    pushd xorg
    tar jxf ~/.tigervnc-xorg-$XORG_VERSION/util-macros.tar.bz2
    pushd util-macros-*
    echo "Building macros"
    ./configure ${1+"$@"} --prefix=${PREFIX}
    ($MAKE install)
    popd

    pushd xserver
    patch -p1 < $SRCDIR/unix/xserver15.patch
    popd
    popd

    pushd $SRCDIR
    if [ ! -f ./configure ]; then
        autoreconf -fiv
    fi
    popd
}


update_modules()
{
    if [ -d xorg ]; then rm -rf xorg; fi
    mkdir xorg
    pushd xorg
    $SRCDIR/unix/download-xorg-$XORG_VERSION
    for module in ${modules}; do
        tar jxf ~/.tigervnc-xorg-$XORG_VERSION/${module}.tar.bz2
    done
    tar jxf ~/.tigervnc-xorg-$XORG_VERSION/Mesa.tar.bz2
    tar jxf ~/.tigervnc-xorg-$XORG_VERSION/freetype.tar.bz2
    tar jxf ~/.tigervnc-xorg-$XORG_VERSION/xorg-server.tar.bz2
    cp -r $SRCDIR/unix/xserver xserver
    cp -r xorg-server-1.*/* xserver
    popd
}


build ()
{
    # Build VNC
    echo "*** Building VNC ***"
    $SRCDIR/configure ${1+"$@"} --prefix=${PREFIX}
    ($MAKE)

    # Build Xorg
    echo "*** Building Xorg ***"
    pushd xorg
    for module in ${modules}; do
        extraoptions=""
        cd ${module}-*
        echo ======================
        echo configuring ${module}
        echo ======================
        if [ "${module}" = "libX11" ]; then
            extraoptions="${extraoptions} --without-xcb"
        fi
        if [ "${module}" = "libSM" ]; then
            extraoptions="${extraoptions} --without-libuuid"
        fi
        if [ $STATIC = 1 ]; then
            extraoptions="${extraoptions} --enable-static --disable-shared"
            OLD_CFLAGS=${CFLAGS}
            OLD_CXXFLAGS=${CXXFLAGS}
            CFLAGS=${CFLAGS}' -fPIC'
            CXXFLAGS=${CXXFLAGS}' -fPIC'
            export CFLAGS CXXFLAGS
        fi
        ./configure ${1+"$@"} --prefix="${PREFIX}" ${extraoptions}
        if [ $STATIC = 1 ]; then
            CFLAGS=${OLD_CFLAGS}
            CXXFLAGS=${OLD_CXXFLAGS}
            export CFLAGS CXXFLAGS
        fi
        echo ======================
        echo building ${module}
        echo ======================
        if [ $? -ne 0 ]; then
                echo "Failed to configure ${module}."
                exit
        fi
        ($MAKE install)
        cd ..
    done

    # build mesa
    echo "*** Building Mesa ***"
    pushd Mesa-*
    ./configure ${1+"$@"} --prefix=${PREFIX} --with-driver=dri --disable-glut --without-demos
    if [ $? -ne 0 ]; then
	echo "Failed to configure Mesa."
	exit
    fi
    ($MAKE install)
    popd

    # build freetype
    if [ $STATIC = 1 ]; then
        echo "*** Building freetype ***"
        pushd freetype-*
        ./configure ${1+"$@"} --prefix=${PREFIX} --enable-static --disable-shared
        if [ $? -ne 0 ]; then
	    echo "Failed to configure freetype."
	    exit
        fi
        ($MAKE install)
        popd
    fi

    popd

    # build xserver
    echo "*** Building xserver ***"
    pushd xorg/xserver
    autoreconf -fiv
    XORGCFGFLAGS='--disable-xinerama --disable-xvfb --disable-xnest --disable-xorg'
    if [ $STATIC = 1 ]; then
        XORGCFGFLAGS="${XORGCFGFLAGS} --disable-shared --enable-static"
    fi
    ./configure ${1+"$@"} --prefix=${PREFIX} ${XORGCFGFLAGS}
    if [ $? -ne 0 ]; then
	echo "Failed to configure X server."
	exit
    fi
    ($MAKE TIGERVNC_SRCDIR=$SRCDIR install)
    popd
}

rebuild ()
{
    # Build VNC
    echo "*** Building VNC ***"
    ($MAKE ${1+"$@"})

    # build xserver
    echo "*** Building xserver ***"
    pushd xorg/xserver
    ($MAKE TIGERVNC_SRCDIR=$SRCDIR install ${1+"$@"})
    popd
}


usage ()
{
    echo "Usage: $0  init -version <7.4 | 7.5>"
    echo
    echo "       $0  build -version <7.4 | 7.5>"
    echo "       [-static] [additional configure flags]"
    echo
    echo "       $0  rebuild -version <7.4 | 7.5> "
    echo "       [additional make options]"
    echo
    echo "       $0  update -version <7.4 | 7.5>"
    echo
    echo "-static = build a stand-alone version of Xvnc which does not depend on"
    echo "          the shared X11 libraries"
    exit 1
}


while [ $# -gt 0 ]
do
    case "$1" in
	init)       MODE=init                ;;
	build)      MODE=build               ;;
	rebuild)    MODE=rebuild             ;;
	update)     MODE=update              ;;
	-static)    STATIC=1                 ;;
	-version)   XORG_VERSION=$2;  shift  ;;
	-srcdir)    SRCDIR=$2;        shift  ;;
	*)          break                    ;;
    esac
    shift
done

if [ "$XORG_VERSION" = "" -o "$MODE" = "" ]
then
    usage
fi

pushd $SRCDIR
SRCDIR=`pwd`
echo "*** Using TigerVNC source tree at $SRCDIR ***"
popd

if [ "`pwd`" = "$SRCDIR/unix" ]; then
    cd $SRCDIR
fi

if [ "$PREFIX" = "" ]; then
    PREFIX=`pwd`/xorg.build
fi

export ACLOCAL="aclocal -I ${PREFIX}/share/aclocal"
export PKG_CONFIG_PATH="${PREFIX}/lib/pkgconfig"

case "$MODE" in
    init)       init                 ;;
    build)      build ${1+"$@"}      ;;
    rebuild)    rebuild ${1+"$@"}    ;;
    update)     update               ;;
    *)          usage                ;;
esac
